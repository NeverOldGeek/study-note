./stack_start.sh -e ittest --ota-server 192.168.24.111 --datarepo-server 192.168.24.111 --upload-server 192.168.24.111 --download-server 192.168.24.111 -t D_20190128
./auto_validation.sh --ota-api 192.168.24.111:4000 --data-repo 192.168.24.111:4001 --user-serv 192.168.24.111:4003 --dev-serv 192.168.24.111:4002 --stor-serv 192.168.24.111:4004 --admin-web 192.168.24.111:3000 --otadbhost 192.168.24.111 --otadbport 5435 -u admin@iauto.com --pwd admin
./auto_validation.sh --ota-api 192.168.24.17:4000 --data-repo 192.168.24.17:4001 --user-serv 192.168.24.17:4003 --dev-serv 192.168.24.17:4002 --stor-serv 192.168.24.17:4004 --admin-web 192.168.24.17:3000
./auto_validation.sh --ota-api nick.iauto.com --data-repo nick.iauto.com --user-serv nick.iauto.com --dev-serv nick.iauto.com --stor-serv nick.iauto.com --admin-web nick.iauto.com
./auto_validation.sh --ota-api 192.168.24.17:4000 --data-repo ota-external-lb-2141653964.us-east-2.elb.amazonaws.com:80 --user-serv ota-external-lb-2141653964.us-east-2.elb.amazonaws.com:80 --dev-serv ota-external-lb-2141653964.us-east-2.elb.amazonaws.com:80 --stor-serv ota-external-lb-2141653964.us-east-2.elb.amazonaws.com:80 --admin-web ota-external-lb-2141653964.us-east-2.elb.amazonaws.com:80

jmeter -n -t getdevtoken.jmx -Jdrhost=192.168.24.18 -Jdrport=4002 -Jpub_key=MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3+yJVXReMJtWAuuHDvgGagDf9iEq73RYIxrX+3eBJ0tCxodLwSsseCFatrskULgTgzGgY3gG02Y/0Tbz86OmgINRsLP+smcEdHj5ZgVXj5WqGWqr8NiFN8TC2nnUHAFtxxHYBuhy0OK5vNV+Vu8s/KITZ4oaQin9YGytowTyNMpE0kZkqX8A4avSq0QKHtC7hVhRIvv0ajNkrDERC+UtnNMsJ/ueduxkWDA1zvUZAG13bXs3snlzH/EX55Zu5cOucbkAo7ansI2GF7JeEdlZ4WzNCgjJHXvKc9jN7dtTb3tts2FVosF2ReN8HATwINSDQEPpe7RKwjFW5c27IQG48wIDAQAB -Jpriv_key=MIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBAIM+XKu8hSo7zq+jXUGzTXk2U1a17EP0MZsj75uJ+UIF8poc0k/bj/8ZeTHMijqxx8QfBHNWA8eWNDJ/tadQ+7YL73i18vzcYO9aPSHSWyq9boghfV61cJRXbMEFoqFtbr4GrfWRH1yp/Z/Oz4n1D52VfrAfMoMGf2tjVbaEDqblAgMBAAECgYAcnfJy9+5JYTUWExb4hnI0JeZSF+TmhE50t4c9cP5KqSVW+UXaZ9OkGhfVBfZ2CeG3H9RGmdDFKjlDcZlYXE4l9vnI/T7rLIDiXJZqb5LCPAiMakyidsDjZ4vBgS1F2TKuc9iAGZb9Rzn+tDMSwezWYbfztAH3p86gUGI2h1+kGQJBAO8ZVNT1sSTEaS3dzieYHgvwT7UdAhqqPJ/qyLtwVZY6vLpskEjEMc64VTA+MV5t2VJPix6ND4BySQMAJQEbuzMCQQCMhU9ba21oNneHVDOQcRyNLxn0CwC2qVqceL4xo7aadovXE6SFCAcqrmpuqwS65frkX71HDoI3uThSUMlpnVWHAkEApSikVq6YfMNHvC0Y+HS1XJ3VEVBGYdDyK6zsl71TAYD1WPkg+YK8vQTLo5VyWL4cfiT//kyGRr2q/W2eIhPbzQJAId1WvJ9tJHpL4A9IxfycduHtDUVBjMPPlHn8zBW6QgtjtBeFxJGkuIKEH9uTLj+ScUspYGB8vVUj36Kch5llLQJBAJDvgI78MVEVZcRz65ki7By9Q1eM5o1lUdxq90kqzXLBqg9OZJ5uc5ZH2SjOnd+2ixlYAubxCzKO/ih/GrYi8g0= -Jmfr_div=pioneer -JdeviceNo=0123456789ABCDEF0123456789ABCDEF

tomcat远程调试
1.在 CATALINA_HOME/bin 目录下创建可执行脚本文件 setenv.sh
	编辑：export JPDA_OPTS="-agentlib:jdwp=transport=dt_socket,address=1043,server=y,suspend=n"
		命令：1. echo export JPDA_OPTS=\"-agentlib:jdwp=transport=dt_socket,address=1043,server=y,suspend=n\" > setenv.sh
			  2. chmod a+x setenv.sh
	参数解析：
		指定运行的被调试应用和调试者之间的通信协议，(ie: transport=dt_socket)
		远程被调试应用开通的端口，(ie: address=1043)， 可定义其他端口，比如9999
		server=y 表示这个 JVM 即将被调试
		suspend=n 用来告知 JVM 立即执行，不要等待未来将要附着上/连上（attached）的调试者。如果设成 y, 则应用将暂停不运行，直到有调试者连接上
	重启linux上的tomcat
2.eclipse连接远程调试端口

1. 查看docker信息（version、info）
# 查看docker版本  
$docker version  
  
# 显示docker系统的信息  
$docker info  
 

2. 对image的操作（search、pull、images、rmi、history）
# 检索image  
$docker search image_name  
  
# 下载image  
$docker pull image_name  
  
# 列出镜像列表; -a, --all=false Show all images; --no-trunc=false Don't truncate output; -q, --quiet=false Only show numeric IDs  
$docker images  
  
# 删除一个或者多个镜像; -f, --force=false Force; --no-prune=false Do not delete untagged parents  
$docker rmi image_name  
  
# 显示一个镜像的历史; --no-trunc=false Don't truncate output; -q, --quiet=false Only show numeric IDs  
$docker history image_name  
 

3. 启动容器（run）
docker容器可以理解为在沙盒中运行的进程。这个沙盒包含了该进程运行所必须的资源，包括文件系统、系统类库、shell 环境等等。但这个沙盒默认是不会运行任何程序的。你需要在沙盒中运行一个进程来启动某一个容器。这个进程是该容器的唯一进程，所以当该进程结束的时候，容器也会完全的停止。


     # 在容器中运行"echo"命令，输出"hello word"  

$docker run image_name echo "hello word"  
  
# 交互式进入容器中  
$docker run -i -t image_name /bin/bash  
  
  
# 在容器中安装新的程序  
$docker run image_name apt-get install -y app_name  
Note：  在执行apt-get 命令的时候，要带上-y参数。如果不指定-y参数的话，apt-get命令会进入交互模式，需要用户输入命令来进行确认，但在docker环境中是无法响应这种交互的。apt-get 命令执行完毕之后，容器就会停止，但对容器的改动不会丢失。

4. 查看容器（ps）
 

# 列出当前所有正在运行的container  
$docker ps  
# 列出所有的container  
$docker ps -a  
# 列出最近一次启动的container  
$docker ps -l  
 

5. 保存对容器的修改（commit）
当你对某一个容器做了修改之后（通过在容器中运行某一个命令），可以把对容器的修改保存下来，这样下次可以从保存后的最新状态运行该容器。
 

# 保存对容器的修改; -a, --author="" Author; -m, --message="" Commit message  
$docker commit ID new_image_name  
Note：  image相当于类，container相当于实例，不过可以动态给实例安装新软件，然后把这个container用commit命令固化成一个image。

 

6. 对容器的操作（rm、stop、start、kill、logs、diff、top、cp、restart、attach）
 
# 删除所有容器  
$docker rm `docker ps -a -q`  
  
# 删除单个容器; -f, --force=false; -l, --link=false Remove the specified link and not the underlying container; -v, --volumes=false Remove the volumes associated to the container  
$docker rm Name/ID  
  
# 停止、启动、杀死一个容器  
$docker stop Name/ID  
$docker start Name/ID  
$docker kill Name/ID  
  
# 从一个容器中取日志; -f, --follow=false Follow log output; -t, --timestamps=false Show timestamps  
$docker logs Name/ID  
  
# 列出一个容器里面被改变的文件或者目录，list列表会显示出三种事件，A 增加的，D 删除的，C 被改变的  
$docker diff Name/ID  
  
# 显示一个运行的容器里面的进程信息  
$docker top Name/ID  
  
# 从容器里面拷贝文件/目录到本地一个路径  
$docker cp Name:/container_path to_path  
$docker cp ID:/container_path to_path  
  
# 重启一个正在运行的容器; -t, --time=10 Number of seconds to try to stop for before killing the container, Default=10  
$docker restart Name/ID  
  
# 附加到一个运行的容器上面; --no-stdin=false Do not attach stdin; --sig-proxy=true Proxify all received signal to the process  
$docker attach ID  
Note： attach命令允许你查看或者影响一个运行的容器。你可以在同一时间attach同一个容器。你也可以从一个容器中脱离出来，是从CTRL-C。

 

7. 保存和加载镜像（save、load）
当需要把一台机器上的镜像迁移到另一台机器的时候，需要保存镜像与加载镜像。


      # 保存镜像到一个tar包; -o, --output="" Write to an file  

$docker save image_name -o file_path  
# 加载一个tar包格式的镜像; -i, --input="" Read from a tar archive file  
$docker load -i file_path  
  
# 机器a  
$docker save image_name > /home/save.tar  
# 使用scp将save.tar拷到机器b上，然后：  
$docker load < /home/save.tar  
 

8、 登录registry server（login）
 
# 登陆registry server; -e, --email="" Email; -p, --password="" Password; -u, --username="" Username  
$docker login  
 

9. 发布image（push）
 
# 发布docker镜像  
$docker push new_image_name  
10.  根据Dockerfile 构建出一个容器
 
#build  
      --no-cache=false Do not use cache when building the image  
      -q, --quiet=false Suppress the verbose output generated by the containers  
      --rm=true Remove intermediate containers after a successful build  
      -t, --tag="" Repository name (and optionally a tag) to be applied to the resulting image in case of success  
$docker build -t image_name Dockerfile_pat